first(program) = {int, void}
first(declaration) = {int, void}
first(var-declaration) = {int}
first(fun-declaration) = {int, void}
first(declaration') = {;, [, (}
first(var-declaration') = {;, [}
first(fun-declaration') = {(}
first(params) = {int, void}
first(param) = {int}
first(type-specifier) = {int, void}
first(compound-stmt) = { { }
first(local-declarations) = {int, empty}
first(statement-list) = {num, (, id, ;, if, while, return, {, empty}
first(statement) = {num, (, id, ;, if, while, return, { }
first(expression-stmt) = {num, (, id, ;}
first(selection-stmt) = {if}
first(iteration-stmt) = {while}
first(return-stmt) = {return}
first(expression) = {num, (, id}
first(expression') = {=, [, (, *, /, empty}
first(expression'') = {=, /, *, empty}
first(simple-expression') = {*, /, empty}
first(additive-expression) = {(, num, id}
first(additive-expression') = {*, /, empty}
first(term) = {(, num, id}
first(term') = {*, /, empty}
first(relop) = {<=, <, >, >=, ==, !=}
first(addop) = {+, -}
first(mulop) = {*, /}
first(factor) = {(, num, id}
first(factor') = {(, [, empty}
first(var') = {[, empty}
first(call') = {(}
first(args) = {num, (, id, empty}
first(arg-list) = {num, (, id}


follow(program) = {empty}
follow(declaration) = {int, void, emtpy}
follow(var-declaration) = {int, void, num, (, id, ;, if, while, return, {, } }
follow(fun-declaration) = {int, void, emtpy}
follow(declaration') = {int, void, emtpy}
follow(var-declaration') = {int, void, emtpy}
follow(fun-declaration') = {int, void, emtpy}
follow(params) = {)}
follow(param) = {',' , )}
follow(type-specifier) = {id}
follow(local-declarations) = {int, void, num, (, id, ;, if, while, return, {, } }
follow(statement-list) = { } }
follow(compound-stmt)   = {int, void, num, (, id, ;, if, while, return, {, }, else }
follow(expression-stmt) = {int, void, num, (, id, ;, if, while, return, {, }, else }
follow(selection-stmt)  = {int, void, num, (, id, ;, if, while, return, {, }, else }
follow(iteration-stmt)  = {int, void, num, (, id, ;, if, while, return, {, }, else }
follow(return-stmt)     = {int, void, num, (, id, ;, if, while, return, {, }, else }
follow(expression) = {;, ), ], ','}
follow(expression') = {;, ), ], ','}
follow(expression'') = {;, ), ], ','}
follow(simple-expression') = {;, ), ], ','}
follow(additive-expression) = {;, ), ], <=, <, >, >=, ==, !=, ','}
follow(additive-expression') = {;, ), ], <=, <, >, >=, ==, !=, ','}
follow(term) = {;, ), ], ',', <=, <, >, >=, ==, !=, +, -}
follow(term') = {;, ), ], ',', <=, <, >, >=, ==, !=, +, -}
follow(relop) = {(, num, id}
follow(addop) = {(, num, id}
follow(mulop) = {(, num, id}
follow(factor) = {*, /, ;, ), ], ',', <=, <, >, >=, ==, !=, +, -}
follow(factor') = {*, /, ;, ), ], ',', <=, <, >, >=, ==, !=, +, -}
follow(var') = {*, /, ;, ), ], ',', <=, <, >, >=, ==, !=, +, -}
follow(call') = {*, /, ;, ), ], ',', <=, <, >, >=, ==, !=, +, -}
follow(args) = {)}
follow(arg-list) = {num, (, id, )}